import shift.scheduler.app.models.Hour;
import shift.scheduler.app.models.Day;
import shift.scheduler.app.models.TimePeriod;
import shift.scheduler.app.models.ScheduleRequirements;
import shift.scheduler.app.models.Employee;
import shift.scheduler.app.models.ScheduleForDay;
import shift.scheduler.app.models.ScheduleForWeek;
import java.util.List;
import java.util.ArrayList;

rule "Schedule for a day with 5 employees"
when
    ScheduleRequirements( $numEmps : numberOfEmployeesPerHour, $day : day, $startHour : startHour, $endHour : endHour, $numHours : numHours, $hours : hours )

    // Generate at most three possible schedules for each day
    Number( intValue < 3 ) from accumulate( ScheduleForDay( day == $day ),
                                            init( int count = 0; ),
                                            action( count++; ),
                                            result( new Integer(count) ) )

    $emp1 : Employee(  )
    $emp2 : Employee( this != $emp1 )
    $emp3 : Employee( this != $emp1, this != $emp2 )
    $emp4 : Employee( this != $emp1, this != $emp2, this != $emp3 )
    $emp5 : Employee( this != $emp1, this != $emp2, this != $emp3, this != $emp4 )

    $shift1 : TimePeriod( day == $day, employee == $emp1 )
    $shift2 : TimePeriod( day == $day, employee == $emp2 )
    $shift3 : TimePeriod( day == $day, employee == $emp3 )
    $shift4 : TimePeriod( day == $day, employee == $emp4 )
    $shift5 : TimePeriod( day == $day, employee == $emp5 )
    $shifts : List() from collect( TimePeriod( (this == $shift1) || (this == $shift2) || (this == $shift3) || (this == $shift4) || (this == $shift5) ) )

    forall( Hour( $value : value ) from $hours
            $numShifts : Number( intValue >= $numEmps ) from accumulate( TimePeriod( (startHour <= $value) && (endHour >= $value) ) from $shifts,
                                                                         init( int count = 0; ),
                                                                         action( count++; ),
                                                                         result( new Integer(count) ) ) )
then

    System.out.println("Schedule for " + $day + ":");
    System.out.println("Shift 1: " + $shift1.getStartHour() + "-" + $shift1.getEndHour());
    System.out.println("Shift 2: " + $shift2.getStartHour() + "-" + $shift2.getEndHour());
    System.out.println("Shift 3: " + $shift3.getStartHour() + "-" + $shift3.getEndHour());
    System.out.println("Shift 4: " + $shift4.getStartHour() + "-" + $shift4.getEndHour());
    System.out.println("Shift 5: " + $shift5.getStartHour() + "-" + $shift5.getEndHour());

    insert(new ScheduleForDay($day, $shifts));
end

rule "Empty schedule for a non-operational day"
when
    ScheduleRequirements( $day : day, (numberOfEmployeesPerHour == 0) )
then
    insert(new ScheduleForDay($day, null));
end

rule "Schedule for a week"
when
    Number( intValue < 3 ) from accumulate( ScheduleForWeek(),
                                            init( int count = 0; ),
                                            action( count++; ),
                                            result( new Integer(count) ) )

    $mon : ScheduleForDay( day == Day.MON )
    $tue : ScheduleForDay( day == Day.TUE )
    $wed : ScheduleForDay( day == Day.WED )
    $thu : ScheduleForDay( day == Day.THU )
    $fri : ScheduleForDay( day == Day.FRI )
    $sat : ScheduleForDay( day == Day.SAT )
    $sun : ScheduleForDay( day == Day.SUN )
then
    System.out.println("Generated weekly schedule");
    List<ScheduleForDay> dailySchedules = new ArrayList<>();
    dailySchedules.add($mon);
    dailySchedules.add($tue);
    dailySchedules.add($wed);
    dailySchedules.add($thu);
    dailySchedules.add($fri);
    dailySchedules.add($sat);
    dailySchedules.add($sun);
    insert(new ScheduleForWeek(null, dailySchedules));
end

query "getWeeklySchedules"
    $schedule : ScheduleForWeek()
end
